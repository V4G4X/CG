#include<stdio.h>
#include<math.h>
#include<GL/freeglut.h>
#include<GL/gl.h>

typedef struct point{
	int x;
	int y;
	void scanner(){
		printf("Enter X-Coordinate: ");
		scanf("%d",&x);
		printf("Enter Y-Coordinate: ");
		scanf("%d",&y);
	}
	void midof(point p1, point p2){
		x=(p1.x + p2.x)/2;
		y=(p1.y + p2.y)/2;
	}
}point;

void bres(int x1,int yy1,int x2,int y2){
	int a1,b1,a2,b2,da,db,p,a,b,ai,bi;
	if(abs(x2-x1)>abs(y2-yy1)){
		a1=x1;
		a2=x2;
		b1=yy1;
		b2=y2;
	}
	else{
		a1=yy1;
		a2=y2;
		b1=x1;
		b2=x2;
	    }
	if((a2-a1)<0){
		ai=-1;
	}
	if((a2-a1)>0){
		ai=1;
	}
	if((b2-b1)<0){
		bi=-1;
	}
	if((b2-b1)>0){
		bi=1;
	}
	da=abs(a2-a1);
	db=abs(b2-b1);
	p=2*db-da;
	int i=0;
	a=x1;
	b=yy1;
printf("\n%d\n",da-1);
	while(i<(da-1)){
		
		if(p<0){
			printf("\n8\n");
			a+=ai;
			setpixel(a,b);
			p=p+(2*db);
			i++;
		}
		else{
			printf("\n9\n");
			a+=ai;
			b+=bi;
			setpixel(a,b);
			p=p+(2*db-2*da);
			i++;
		}
	}
glFlush();
}

void swap(int *x,int *x1){
	int c = *x;
	*x = *x1;
	*x1 = c;
}

void axis(){
/*
	dda(-750,0,750,0);
	dda(0,-750,0,750);
	*/void bres(int x1,int yy1,int x2,int y2){
	printf("\n4\n");
	int a1,b1,a2,b2,da,db,p,a,b,ai,bi;
	if(abs(x2-x1)>abs(y2-yy1))
	{
		a1=x1;
		a2=x2;
		b1=yy1;
		b2=y2;
	}
	else{
		a1=yy1;
		a2=y2;
		b1=x1;
		b2=x2;
	    }
	printf("\n5\n");
	if((a2-a1)<0)
	{
		ai=-1;
	}
	if((a2-a1)>0)
	{
		ai=1;
	}
	if((b2-b1)<0)
	{
		bi=-1;
	}
	if((b2-b1)>0)
	{
		bi=1;
	}
	da=abs(a2-a1);
	db=abs(b2-b1);
	p=2*db-da;
	int i=0;
	a=x1;
	b=yy1;
printf("\n6\n");
printf("\n%d\n",da-1);
	while(i<(da-1)){
		
		if(p<0){
			printf("\n8\n");
			a+=ai;
			setpixel(a,b);
			p=p+(2*db);
			i++;
		}
		else{
			printf("\n9\n");
			a+=ai;
			b+=bi;
			setpixel(a,b);
			p=p+(2*db-2*da);
			i++;
		}
	}
glFlush();
printf("\n7\n");
}
}

void render(){
	gluOrtho2D(750,-750,750,-750);
	axis();
	point p1,p2,p3;
	printf("Point1:\n");
	p1.scanner();
	printf("Point2:\n");void bres(int x1,int yy1,int x2,int y2){
	printf("\n4\n");
	int a1,b1,a2,b2,da,db,p,a,b,ai,bi;
	if(abs(x2-x1)>abs(y2-yy1))
	{
		a1=x1;
		a2=x2;
		b1=yy1;
		b2=y2;
	}
	else{
		a1=yy1;
		a2=y2;
		b1=x1;
		b2=x2;
	    }
	printf("\n5\n");
	if((a2-a1)<0)
	{
		ai=-1;
	}
	if((a2-a1)>0)
	{
		ai=1;
	}
	if((b2-b1)<0)
	{
		bi=-1;
	}
	if((b2-b1)>0)
	{
		bi=1;
	}
	da=abs(a2-a1);
	db=abs(b2-b1);
	p=2*db-da;
	int i=0;
	a=x1;
	b=yy1;
printf("\n6\n");
printf("\n%d\n",da-1);
	while(i<(da-1)){
		
		if(p<0){
			printf("\n8\n");
			a+=ai;
			setpixel(a,b);
			p=p+(2*db);
			i++;
		}
		else{
			printf("\n9\n");
			a+=ai;
			b+=bi;
			setpixel(a,b);
			p=p+(2*db-2*da);
			i++;
		}
	}
glFlush();
printf("\n7\n");
}
	p2.scanner();
	printf("Point3:\n");
	p3.scanner();
	
	point p4,p5,p6;
	p4.midof(p1,p2);
	p5.midof(p2,p3);
	p6.midof(p3,p1);
	
	
	
	glFlush();
}

void bresen(point p1, point p2){

	
	
	
	glColor3f(0.0, 0.0, 0.0);
	glBegin(GL_POINTS);
	glEnd();
}



int main(int argc, char** argv){
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500,500);
	glutInitWindowPosition(100,100);
	glutCreateWindow("Bresenham Line");
	
	glClearColor(1.0,1.0,1.0,0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glutDisplayFunc(render);
	 
	 glutMainLoop();
}	
